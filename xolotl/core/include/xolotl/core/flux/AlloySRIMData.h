#ifndef ALLOYSRIMDATA_H
#define ALLOYSRIMDATA_H

#include <vector>

namespace xolotl
{
namespace core
{
namespace flux
{
// begin class Cascade
class Cascade
{
private:
public:
	std::vector<std::vector<double>> clusterFraction;
	const std::vector<int> clusterSizes;
	std::vector<double> cascadeEfficiency;
	const double perfectFraction;

	Cascade() :
		clusterSizes({45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32,
			31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15,
			14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, -1, -2, -3, -4, -5,
			-6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19,
			-20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32,
			-33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45}),
		perfectFraction(0.2)
	{
		return;
	}

	void
	setBulk()
	{
		cascadeEfficiency = {0.15};
		clusterFraction = {{0.000}, {0.000}, {0.019}, {0.021}, {0.001}, {0.006},
			{0.003}, {0.002}, {0.003}, {0.000}, {0.003}, {0.002}, {0.010},
			{0.003}, {0.013}, {0.003}, {0.003}, {0.010}, {0.001}, {0.002},
			{0.002}, {0.005}, {0.003}, {0.006}, {0.003}, {0.006}, {0.002},
			{0.003}, {0.013}, {0.003}, {0.005}, {0.016}, {0.008}, {0.014},
			{0.011}, {0.032}, {0.016}, {0.016}, {0.019}, {0.039}, {0.035},
			{0.066}, {0.120}, {0.100}, {0.350}, {0.350}, {0.100}, {0.120},
			{0.066}, {0.035}, {0.039}, {0.019}, {0.016}, {0.016}, {0.032},
			{0.011}, {0.014}, {0.008}, {0.016}, {0.005}, {0.003}, {0.013},
			{0.003}, {0.002}, {0.006}, {0.003}, {0.006}, {0.003}, {0.005},
			{0.002}, {0.002}, {0.001}, {0.010}, {0.003}, {0.003}, {0.013},
			{0.003}, {0.010}, {0.002}, {0.003}, {0.000}, {0.003}, {0.002},
			{0.003}, {0.006}, {0.001}, {0.021}, {0.019}, {0.000}, {0.000}};
	}

	void
	setOverlap()
	{
		cascadeEfficiency = {0.15};
		clusterFraction = {{0.000}, {0.000}, {0.019}, {0.021}, {0.001}, {0.006},
			{0.003}, {0.002}, {0.003}, {0.000}, {0.003}, {0.002}, {0.010},
			{0.003}, {0.013}, {0.003}, {0.003}, {0.010}, {0.001}, {0.002},
			{0.002}, {0.005}, {0.003}, {0.006}, {0.003}, {0.006}, {0.002},
			{0.003}, {0.013}, {0.003}, {0.005}, {0.016}, {0.008}, {0.014},
			{0.011}, {0.032}, {0.016}, {0.016}, {0.019}, {0.039}, {0.035},
			{0.066}, {0.120}, {0.100}, {0.350}, {0.350}, {0.100}, {0.120},
			{0.066}, {0.035}, {0.039}, {0.019}, {0.016}, {0.016}, {0.032},
			{0.011}, {0.014}, {0.008}, {0.016}, {0.005}, {0.003}, {0.013},
			{0.003}, {0.002}, {0.006}, {0.003}, {0.006}, {0.003}, {0.005},
			{0.002}, {0.002}, {0.001}, {0.010}, {0.003}, {0.003}, {0.013},
			{0.003}, {0.010}, {0.002}, {0.003}, {0.000}, {0.003}, {0.002},
			{0.003}, {0.006}, {0.001}, {0.021}, {0.019}, {0.000}, {0.000}};
	}
};
// end class Cascade

class SRIMData
{
protected:
	std::vector<double> depth;
	std::vector<std::vector<double>> damage;
	std::vector<double> implantation;

public:
	SRIMData()
	{
		return;
	}
	std::vector<double>
	getDepth()
	{
		return depth;
	}
	std::vector<std::vector<double>>
	getDamage()
	{
		return damage;
	}
	std::vector<double>
	getImplantation()
	{
		return implantation;
	}
	void
	setInSitu()
	{
		depth = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140,
			150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270,
			280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400,
			410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530,
			540, 550};
		damage = {{0.989951, 1.12413, 1.05185, 9.24095},
			{1.07173, 1.20697, 1.13084, 9.82103},
			{1.10253, 1.25748, 1.17203, 10.2216},
			{1.14176, 1.30553, 1.24145, 10.5252},
			{1.18783, 1.36207, 1.27287, 10.6713},
			{1.22959, 1.42007, 1.34888, 11.1115},
			{1.27548, 1.48213, 1.41754, 11.3377},
			{1.32009, 1.56411, 1.46843, 11.6518},
			{1.3591, 1.60631, 1.53331, 12.0082},
			{1.40554, 1.67004, 1.55905, 12.144},
			{1.4505, 1.72672, 1.64081, 12.281},
			{1.49526, 1.78127, 1.70252, 12.5266},
			{1.54246, 1.85934, 1.78801, 12.7381},
			{1.57722, 1.89112, 1.81832, 12.8325},
			{1.60336, 1.93527, 1.87448, 12.7261},
			{1.62848, 1.98116, 1.88077, 12.5582},
			{1.64243, 2.00864, 1.91759, 12.491},
			{1.66256, 2.0403, 1.94385, 12.2427},
			{1.65517, 2.04298, 1.93514, 11.9928},
			{1.6395, 2.01447, 1.93511, 11.6899},
			{1.60955, 1.98671, 1.89988, 11.0849},
			{1.57854, 1.93925, 1.85491, 10.7857},
			{1.53209, 1.88592, 1.81087, 10.0685},
			{1.45592, 1.8032, 1.73988, 9.3749},
			{1.38467, 1.71331, 1.63133, 8.60395},
			{1.29988, 1.61522, 1.54271, 7.99702},
			{1.20527, 1.48536, 1.42954, 7.03046},
			{1.10948, 1.38457, 1.28553, 6.27128},
			{0.993709, 1.23881, 1.16539, 5.39555},
			{0.880955, 1.0885, 1.02545, 4.76185},
			{0.784851, 0.974278, 0.916095, 3.99001},
			{0.68391, 0.853514, 0.794634, 3.34665},
			{0.578624, 0.70784, 0.663107, 2.82839},
			{0.485876, 0.601163, 0.565777, 2.26214},
			{0.401816, 0.489428, 0.470619, 1.78098},
			{0.32581, 0.395406, 0.366279, 1.39933},
			{0.260004, 0.319967, 0.299005, 1.116},
			{0.203472, 0.252726, 0.23789, 0.808684},
			{0.154129, 0.188876, 0.173798, 0.605839},
			{0.115232, 0.139769, 0.127419, 0.438295},
			{0.085828, 0.100144, 0.098823, 0.300228},
			{0.062848, 0.07526, 0.065442, 0.2072},
			{0.043048, 0.050146, 0.044712, 0.139193},
			{0.030835, 0.039912, 0.029841, 0.098319},
			{0.019071, 0.025462, 0.020913, 0.052365},
			{0.012395, 0.016556, 0.011996, 0.03929},
			{0.007989, 0.009955, 0.008984, 0.020821},
			{0.004741, 0.005594, 0.005747, 0.01566},
			{0.003316, 0.003524, 0.003409, 0.007423},
			{0.001806, 0.002373, 0.002065, 0.003454},
			{0.000972, 0.001386, 0.001748, 0.002218},
			{0.000804, 0.000733, 0.000546, 0.001833},
			{0.000316, 0.00058, 0.000445, 0.000849},
			{0.000184, 0.000234, 0.000148, 0.000214}, {4.9e-05, 6.6e-05, 0, 0}};
		implantation = {1.9e-05, 6.3e-05, 0.000129, 0.000204, 0.000329, 0.00048,
			0.000589, 0.00077, 0.000925, 0.001097, 0.001327, 0.001591, 0.001911,
			0.002122, 0.002317, 0.00265, 0.003025, 0.003322, 0.003629, 0.003816,
			0.004143, 0.004342, 0.004611, 0.004679, 0.004683, 0.004796,
			0.004641, 0.004553, 0.004344, 0.004022, 0.003776, 0.003531,
			0.003123, 0.002714, 0.00237, 0.002035, 0.001664, 0.001434, 0.001133,
			0.000826, 0.000677, 0.000464, 0.000361, 0.000263, 0.000177,
			0.000119, 7.5e-05, 4.9e-05, 2.8e-05, 1.5e-05, 1.5e-05, 1.1e-05,
			2e-06, 2e-06, 2e-06};
		return;
	}
	void
	setBulk()
	{
		depth = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140,
			150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270,
			280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400,
			410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530,
			540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660,
			670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790,
			800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920,
			930, 940, 950, 960, 970, 980, 990, 1000, 1010, 1020, 1030, 1040,
			1050, 1060, 1070, 1080, 1090, 1100, 1110, 1120, 1130, 1140, 1150,
			1160, 1170, 1180, 1190, 1200, 1210, 1220, 1230, 1240, 1250, 1260,
			1270, 1280, 1290, 1300, 1310, 1320, 1330, 1340, 1350, 1360, 1370,
			1380, 1390, 1400, 1410, 1420, 1430, 1440, 1450, 1460, 1470, 1480,
			1490, 1500, 1510, 1520, 1530, 1540, 1550, 1560, 1570, 1580, 1590,
			1600, 1610, 1620, 1630, 1640, 1650, 1660, 1670, 1680, 1690, 1700,
			1710, 1720, 1730, 1740, 1750, 1760, 1770, 1780, 1790, 1800, 1810,
			1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890, 1900, 1910, 1920,
			1930};
		damage = {{8.57E+01, 0.0}};
		implantation = {1.000E-06, 1.000E-06, 1.000E-06, 1.000E-06, 2.000E-06,
			2.000E-06, 3.000E-06, 3.000E-06, 1.000E-06, 2.000E-06, 2.000E-06,
			1.000E-06, 4.000E-06, 3.000E-06, 1.000E-05, 2.000E-06, 6.000E-06,
			3.000E-06, 5.000E-06, 6.000E-06, 7.000E-06, 3.000E-06, 8.000E-06,
			9.000E-06, 7.000E-06, 1.000E-05, 1.300E-05, 9.000E-06, 1.600E-05,
			1.200E-05, 1.000E-05, 1.100E-05, 1.400E-05, 1.400E-05, 1.600E-05,
			1.300E-05, 1.800E-05, 1.400E-05, 1.100E-05, 1.200E-05, 2.100E-05,
			1.700E-05, 1.500E-05, 2.000E-05, 3.300E-05, 2.700E-05, 3.200E-05,
			2.600E-05, 4.000E-05, 2.500E-05, 1.700E-05, 3.500E-05, 3.700E-05,
			3.700E-05, 3.300E-05, 3.200E-05, 4.800E-05, 4.300E-05, 5.000E-05,
			4.900E-05, 5.200E-05, 3.500E-05, 6.400E-05, 5.800E-05, 7.400E-05,
			6.000E-05, 7.600E-05, 8.700E-05, 7.100E-05, 7.800E-05, 9.700E-05,
			9.000E-05, 1.060E-04, 1.000E-04, 1.070E-04, 1.260E-04, 1.210E-04,
			1.160E-04, 1.250E-04, 1.290E-04, 1.730E-04, 1.400E-04, 1.590E-04,
			1.760E-04, 1.840E-04, 1.700E-04, 1.970E-04, 2.260E-04, 2.490E-04,
			2.430E-04, 2.290E-04, 2.570E-04, 2.870E-04, 3.140E-04, 2.990E-04,
			3.330E-04, 3.520E-04, 3.620E-04, 3.810E-04, 4.450E-04, 4.550E-04,
			4.970E-04, 4.950E-04, 4.810E-04, 5.390E-04, 5.780E-04, 6.270E-04,
			6.390E-04, 6.500E-04, 7.000E-04, 7.160E-04, 7.700E-04, 8.160E-04,
			8.590E-04, 9.000E-04, 9.100E-04, 9.820E-04, 1.047E-03, 1.056E-03,
			1.104E-03, 1.184E-03, 1.232E-03, 1.322E-03, 1.327E-03, 1.470E-03,
			1.483E-03, 1.542E-03, 1.563E-03, 1.615E-03, 1.729E-03, 1.673E-03,
			1.830E-03, 1.830E-03, 1.865E-03, 1.928E-03, 1.978E-03, 2.008E-03,
			2.114E-03, 1.996E-03, 1.991E-03, 2.056E-03, 2.132E-03, 2.079E-03,
			2.069E-03, 2.076E-03, 2.008E-03, 1.981E-03, 1.997E-03, 1.950E-03,
			1.899E-03, 1.897E-03, 1.729E-03, 1.776E-03, 1.668E-03, 1.654E-03,
			1.535E-03, 1.387E-03, 1.289E-03, 1.182E-03, 1.149E-03, 1.007E-03,
			9.740E-04, 8.950E-04, 7.440E-04, 6.490E-04, 5.890E-04, 5.510E-04,
			4.640E-04, 4.110E-04, 3.470E-04, 2.890E-04, 2.500E-04, 1.870E-04,
			1.670E-04, 1.200E-04, 1.030E-04, 8.100E-05, 5.800E-05, 6.200E-05,
			4.300E-05, 3.200E-05, 2.400E-05, 1.700E-05, 1.900E-05, 9.000E-06,
			4.000E-06, 4.000E-06, 5.000E-06, 4.000E-06, 1.000E-06, 1.000E-06,
			1.000E-06, 1.000E-06};
		return;
	}
	void
	setOverlap()
	{
		depth = {0};
		damage = {{8.57E+01, 0.0}};
		implantation = {0.0};
		return;
	}
};

} // namespace flux
} // namespace core
} // namespace xolotl

#endif
